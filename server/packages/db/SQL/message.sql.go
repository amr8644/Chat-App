// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: message.sql

package db

import (
	"context"
	"database/sql"
)

const getMessages = `-- name: GetMessages :many
SELECT id, user_id, channel_id, messages, created_at FROM messages
WHERE channel_id = ?
`

func (q *Queries) GetMessages(ctx context.Context, channelID sql.NullInt32) ([]Messages, error) {
	rows, err := q.db.QueryContext(ctx, getMessages, channelID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Messages
	for rows.Next() {
		var i Messages
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ChannelID,
			&i.Messages,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const sendMessage = `-- name: SendMessage :execresult
INSERT INTO messages(
  user_id, channel_id,  messages
) VALUES (
   ?, ?, ?
)
`

type SendMessageParams struct {
	UserID    sql.NullInt32  `json:"user_id"`
	ChannelID sql.NullInt32  `json:"channel_id"`
	Messages  sql.NullString `json:"messages"`
}

func (q *Queries) SendMessage(ctx context.Context, arg SendMessageParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, sendMessage, arg.UserID, arg.ChannelID, arg.Messages)
}
